# 
#  Readout of an SRS using a TIpcie as a trigger source
#
#    Bryan Moffit, TJNAF 2015
#

readout list GEN_USER
maximum 1024*80*2,512
polling
general readout

# TRIG_MODE = TIP_READOUT_EXT_POLL for polling mode (External front panel input)
#           = TIP_READOUT_TS_POLL  for polling mode (Fiber input from TS)
const TRIG_MODE = TIP_READOUT_EXT_POLL

const BLOCKLEVEL  = 1
const BUFFERLEVEL = 4


# PULSER_TRIGGER 
#   is for pedestal and/or debugging. 
#  Set to 0 to use Front Panel inputs or TS Fiber Connection (TRIG_MODE above)
const PULSER_TRIGGER      = 1
# PULSER_TYPE   0 - Fixed   1 - Random
const PULSER_TYPE         = 1
# PULSER_FIXED  
const PULSER_FIXED_NUMBER = BLOCKLEVEL
const PULSER_FIXED_PERIOD = 2
const PULSER_FIXED_LONG   = 1
# PULSER_RANDOM_FREQ where arg sets frequency to 500kHz/(2^(arg-1))
const PULSER_RANDOM_FREQ  = 0x6

const DO_SRS_READOUT = 1

%%
extern int bigendian_out;
#include "srsLib.h"

int nfec=0; /* Number of FEC to initialize (changes in download) */

%%

############################################################
# DOWNLOAD
############################################################
begin download

# Sending little-endian (Linux-ROC) to little-endian (Linux-EB)
bigendian_out = 1;

%%
{
  /*************************************************************
   * Setup TIpcie 
   */
  tipInit(TRIG_MODE,0);

  tipLoadTriggerTable(0);
    
  /* Trigger Holdoff:
   *                   rule
   *    timestep    1      2      3      4
   *    -------   -----  ----- ------ ------
   *       0       16ns   16ns   16ns   16ns 
   *       1      160ns  500ns  500ns  500ns 
   *       2     5120ns
   */
  tipSetTriggerHoldoff(1,1,2); // Set to ~10usec for busy feedback
  tipSetTriggerHoldoff(2,0,2);
  tipSetTriggerHoldoff(3,0,2);
  tipSetTriggerHoldoff(4,0,2);

  tipSetPrescale(0);
  tipSetBlockLevel(BLOCKLEVEL);

  if(PULSER_TRIGGER)
    tipSetTriggerSource(TIP_TRIGGER_PULSER);
  else
    {
      tipSetTriggerSource(TIP_TRIGGER_TSINPUTS);

      /* Enable input 1 and 2 */
      tipEnableTSInput(TIP_TSINPUT_ALL);
  }

  /* Enable self and front panel busy input */
  tipSetBusySource(TIP_BUSY_LOOPBACK | TIP_BUSY_FP ,1);

  /* Number of blocks allowed in the system at any given time */
  tipSetBlockBufferLevel(BUFFERLEVEL);

  /* Sync Event interval
   *  0 : off
   *  n : Sync event every n blocks
   */
  tipSetSyncEventInterval(0);

  /*************************************************************
   * Setup SRS 
   */
  char FEC[MAX_FEC][100];

  nfec=0;
  strncpy(FEC[nfec++], "10.0.0.2",100);
  strncpy(FEC[nfec++], "10.0.1.2",100);
  /* strncpy(FEC[nfec++], "10.0.3.2",100); */
  strncpy(FEC[nfec++], "10.0.4.2",100);
  /* strncpy(FEC[nfec++], "10.0.5.2",100); */
  /* strncpy(FEC[nfec++], "10.0.7.2",100); */

  char hosts[MAX_FEC][100];
  int ifec=0;
  int starting_port = 7000;

  /* Associate FECs with Specific Host IPs and ports */
  for(ifec=0; ifec<nfec; ifec++)
    {
      sprintf(hosts[ifec],"10.0.0.%d",ifec+3);

      /* Configure FEC */
      if(srsInit(FEC[ifec], hosts[ifec])<0)
	printf("ERROR!\n");

      /* Same as call to 
	 srsExecConfigFile("config/set_IP10012.txt"); */
      srsSetDTCC(ifec, 
		 1, // int dataOverEth
		 0, // int noFlowCtrl 
		 2, // int paddingType
		 0, // int trgIDEnable
		 0, // int trgIDAll
		 4, // int trailerCnt
		 0xaa, // int paddingByte
		 0xdd  // int trailerByte
		 );

      /* Same as call to 
	 srsExecConfigFile("config/adc_IP10012.txt"); */
      srsConfigADC(ifec,
		   0xffff, // int reset_mask
		   0, // int ch0_down_mask
		   0, // int ch1_down_mask
		   0, // int eq_level0_mask
		   0, // int eq_level1_mask
		   0, // int trgout_enable_mask
		   0xffff // int bclk_enable_mask
		   );

      /* Same as call to 
	 srsExecConfigFile("config/fecCalPulse_IP10012.txt"); */
      srsSetApvTriggerControl(ifec,
			      4+2, // int mode
			      0, // int trgburst (x+1)*3 time bins
			      0x4, // int freq
			      0x100, // int trgdelay
			      0x7f, // int tpdelay
			      0x12e // int rosync
			      );
      srsSetEventBuild(ifec,
		       0x1ff, // int chEnable
		       550, // int dataLength
		       2, // int mode
		       0, // int eventInfoType
		       0xaa000bb8 | (ifec<<16) // unsigned int eventInfoData
		       );
	
      /* Same as call to 
	 srsExecConfigFile("config/apv_IP10012.txt"); */
      srsAPVConfig(ifec, 
		   0xff, // int channel_mask, 
		   0x03, // int device_mask,
		   0x19, // int mode, 
		   0x80, // int latency, 
		   0x2, // int mux_gain, 
		   0x62, // int ipre, 
		   0x34, // int ipcasc, 
		   0x22, // int ipsf, 
		   0x22, // int isha, 
		   0x22, // int issf, 
		   0x37, // int ipsp, 
		   0x10, // int imuxin, 
		   0x64, // int ical, 
		   0x28, // int vsps,
		   0x3c, // int vfs, 
		   0x1e, // int vfp, 
		   0xef, // int cdrv, 
		   0xf7 // int csel
		   );

      /* Same as call to 
	 srsExecConfigFile("/daqfs/home/moffit/work/SRS/test/config/fecAPVreset_IP10012.txt"); */
      srsAPVReset(ifec);

      /* Same as call to 
	 srsExecConfigFile("config/pll_IP10012.txt"); */
      srsPLLConfig(ifec, 
		   0xff, // int channel_mask,
		   0, // int fine_delay, 
		   0 // int trg_delay
		   );
      
    }


}
%%
  log inform "TIPCIE SRS Download Executed"

end download
    
############################################################
# PRESTART
############################################################
begin prestart

  variable jj, adc_id

  log inform "Entering TIPCIE SRS Prestart"

  init trig source GEN
  link sync trig source GEN 1 to tipcie_trig and tipcie_trig_done
  event type 1 then read GEN 1

  log inform "TIPCIE SRS Prestart Executed"

%%
{
  tipStatus(1);

  int ifec=0;
  for(ifec=0; ifec<nfec; ifec++)
    {
      srsStatus(ifec,0);
    }

  tipTrigLinkReset();
  usleep(10000);
  tipSyncReset(1);

}
%%

end prestart

############################################################
# GO
############################################################
begin go
  
  log inform "Entering TIPCIE SRS Go"

%%
{
  int ifec=0;

  for(ifec=0; ifec<nfec; ifec++)
    {
      srsTrigEnable(ifec);
      srsStatus(ifec,0);
    }

  tipStatus(1);
  tipPrintTempVolt();

  CDOENABLE(GEN,1,0);
  
  if(PULSER_TRIGGER==1)
    {
      /* Enable TI pulser */
      if(PULSER_TYPE==0)
	{
	  tipSoftTrig(1,PULSER_FIXED_NUMBER,PULSER_FIXED_PERIOD,PULSER_FIXED_LONG);
	}
      else
	{
	  tipSetRandomTrigger(1,PULSER_RANDOM_FREQ);
	}
    }
}
%%

  log inform "TIPCIE SRS Go Executed"

end go


############################################################
# END
############################################################
begin end

%%
{
  int ifec=0;

  if(PULSER_TRIGGER==1)
    {
      /* Disable TI pulser */
      if(PULSER_TYPE==0)
	{
	  tipSoftTrig(1,0,0,0);
	}
      else
	{
	  tipDisableRandomTrigger();
	}
    }

  CDODISABLE(GEN,1,0);

  tipStatus(1);

  for(ifec=0; ifec<nfec; ifec++)
    {
	srsTrigDisable(ifec);

      srsStatus(ifec,0);
    }
}
%%

  log inform "TIPCIE SRS End Executed"

end end

############################################################
# PAUSE
############################################################
begin pause

  CDODISABLE(GEN,1,0);

  log inform "TIPCIE SRS Pause Executed"

end pause

############################################################
# TRIGGER
############################################################
begin trigger tipcie_trig

 variable ii, event_ty, event_no

 event_ty = EVTYPE;
 event_no = *rol->nevents;

 rol->dabufp = (long *) 0;
 open event type EVTYPE of BT_BANK

%%
 {
   int dCnt_total=0; /* Running total of data collected */
   int dCnt=0;

   /************************************************************
    * TI READOUT
    */
   CBOPEN(4, BT_UI4, 0);
   dCnt = tipReadBlock((volatile unsigned int *)rol->dabufp,1024,0);
   if(dCnt<=0)
     {
       printf("**************************************************\n");
       printf("%6d: No TI data or error.  dCnt = %d\n",event_no,dCnt);
       printf("**************************************************\n");

       if(TRIG_MODE==TIP_READOUT_EXT_POLL)
	 tipSetBlockLimit(1); /* Effectively... stop triggers */
     }
   else
     rol->dabufp += dCnt;

   dCnt_total += dCnt;

   CBCLOSE;

   /************************************************************
    * SRS READOUT
    */

   int ifec=0;
   int nframes=0;

   for(ifec=0; ifec<nfec; ifec++)
     {

       dCnt=0;
       CBOPEN(5+ifec, BT_UI4, 0);
       dCnt = srsReadBlock(ifec,
			   (volatile unsigned int *)rol->dabufp,
			   2*80*1024, BLOCKLEVEL, &nframes);
       if(dCnt<=0)
	 {
	   printf("**************************************************\n");
	   printf("%6d: No SRS data or error.  dCnt = %d\n",event_no,dCnt);
	   printf("**************************************************\n");
	 }
       else
	 {
/* #define CHECKFRAMES */
#ifdef CHECKFRAMES
	   if(nframes!=10)
	     {
	       int idata=0, len = dCnt;
	       unsigned int *SRSdata = rol->dabufp;
	       int icounter=0;
	       int samples=0;
	       unsigned int tmpData=0;

		   
	       for(idata=0;idata<(len);idata++)
		 {

		   if ((SRSdata[idata]&0xffffff)==0x434441)
		     icounter=0;

		   if((icounter%8)==0) 
		     printf("\n%4d\t",icounter);

		   if(icounter==1)
		     samples = (LSWAP(SRSdata[idata])) & 0xffff;

		   if (((icounter-2)*2)==samples)
		     {
		       icounter=0;
		       printf("\n");
		     }

		   if(icounter<2)
		     printf("  0x%08x ",(unsigned int)LSWAP(SRSdata[idata]));
		   else
		     {
		       tmpData = (unsigned int)LSWAP(SRSdata[idata]);
		       printf("   %04x %04x ",
			      (tmpData&0xFF000000)>>24 | (tmpData&0x00FF0000)>>8, 
			      (tmpData&0x0000FF00)>>8 | (tmpData&0x000000FF)<<8
			      );
		     }
		   icounter++;
		 }

	     }
#endif

	   /* Bump data buffer by the amount of data received */
	   rol->dabufp += dCnt;

	   dCnt_total += dCnt;

	 }      
       CBCLOSE;

     }

   /*
     Check to see if there's too much data in this event 
     (Compared to the event buffer size)
   */
   if(dCnt_total>=(MAX_EVENT_LENGTH>>2))
     {
       printf("%s: %8d ERROR: Data Count (%d) > Max words alloc'd (%d)\n",
	      __FUNCTION__,event_no,dCnt_total, MAX_EVENT_LENGTH>>2);
     }
   
 }
%%

 close event

end trigger

begin done tipcie_trig

end done

############################################################
# DONE (TRIGGER ACKNOWLEDGE)
############################################################
begin done
  CDOACK(GEN,1,0);

%%
{ // PULSER ACTION, if needed
  if((PULSER_TRIGGER==1) &&(PULSER_TYPE==0))
    {
      tipSoftTrig(1,PULSER_FIXED_NUMBER,PULSER_FIXED_PERIOD,PULSER_FIXED_LONG);
    }
}
%%  

end done

begin status

end status


%%
int 
rocClose()
{
  int ifec=0;

  for(ifec=0; ifec<nfec; ifec++)
    srsTrigDisable(ifec);

  sleep(1);

  for(ifec=0; ifec<nfec; ifec++)
    {
      srsClose(ifec);
    }
}
%%
